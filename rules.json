{
  "rules": {
    ".read": true,
      "users":{
        "$uid": {
          ".write": "auth != null && auth.uid === $uid && newData.exists()",
          ".validate" : "newData.isBoolean() && newData.val() == true || data.exists()"
        }
      },
      "transactions":{
        "$transactionId":{
          ".write" : "!data.exists() && newData.exists() && newData.getPriority() === now && !newData.hasChild('reversed')",
          ".validate" : "newData.hasChildren(['comment','by','from','to'])",
          "comment" : {
            ".validate" : "newData.isString() && newData.val().length >= 3 && newData.val().length < 128",
          },
          "by" : {
            ".validate" : "newData.isString() && root.child('users').child(newData.val()).val() === true",
          },
          "reversed" : {
            ".write" : "!data.exists() && newData.exists()",
            ".validate" : "newData.hasChildren(['comment','by','at'])",
            "comment" : {
              ".validate" : "newData.isString() && newData.val().length >= 3 && newData.val().length < 128",
            },
            "by" : {
                ".validate" : "newData.isString() && root.child('users').child(newData.val()).val() === true",
            },
            "at" : {
                ".validate" : "newData.val() === now"
            },
            "$other" : {
              ".validate" : false
            }
          },
          "$from_or_to" : {
            ".validate" : "($from_or_to === 'from' || $from_or_to === 'to') && newData.hasChildren()",
            "$uid" : {
              ".validate" : "root.child('users').child($uid).val() === true && newData.isNumber() && newData.val() > 0 && newData.val() % 1 === 0"
            }
          }
        }
      },
      "$other" : {
        ".validate": false
      }
  }
}

